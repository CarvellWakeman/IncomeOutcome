    public int GetOccurencesWithin(LocalDate start, LocalDate end)
    {
        int occurrences = 0;
        int daysBtwnDateandStart = 0;
        int k = 0;
        int firstOccurrenceOfEventAfterStart = 0;

        LocalDate lastDayOfEvent = null;
        LocalDate actualStartDay = null;
        LocalDate actualEndDay = null;

        if (repeatFrequency != Repeat.NEVER) {
            //Start null check
            if (start == null) { start = date; }
            //End null check
            if (end == null) { end = date; }
        }

        if (repeatFrequency == Repeat.NEVER) {
            if (date != null) {
                if (start != null && end != null && date.compareTo(start) >= 0 && date.compareTo(end) <= 0) { return 1; }
                else if (start != null && end == null && date.compareTo(start) >= 0) { return 1; }
                else if (start == null && end != null && date.compareTo(end) <= 0) { return 1; }
                else if (start == null && end == null) { return 1; }
                else { return 0; }
            }
            else { return 1; }
        }
        else if (repeatFrequency == Repeat.DAILY) {
            //Start occurs at least at date, and at most, end
            start = dateMin(dateMax(start, date), end);

            //Start Day calculation (Find the first day after start that the event occurred)
            daysBtwnDateandStart = Days.daysBetween(date, start).getDays();
            k = repeatEveryN - (daysBtwnDateandStart % repeatEveryN);
            firstOccurrenceOfEventAfterStart = k * (k == repeatEveryN ? 0 : 1);
            actualStartDay = start.plusDays(firstOccurrenceOfEventAfterStart);

            //End Day calculation
            actualEndDay = dateMin(end, repeatUntilDate);

            //ProfileManager.PrintLong( "DaysBtwnDateandStart:" + String.valueOf(daysBtwnDateandStart) );
            //ProfileManager.PrintLong( "k:" + String.valueOf(k) );
            //ProfileManager.PrintLong( "firstOccurrenceOfEventAfterStart:" + String.valueOf(firstOccurrenceOfEventAfterStart) );
            //ProfileManager.PrintLong( "ActualStart:" + actualStartDay.toString(ProfileManager.simpleDateFormat) );
            //ProfileManager.PrintLong( "ActualEnd:" + actualEndDay.toString(ProfileManager.simpleDateFormat) );

            //If the event repeats N times
            if (repeatUntil == RepeatUntil.TIMES) {
                lastDayOfEvent = date.plusDays((repeatUntilTimes * repeatEveryN) - repeatEveryN);
                //ProfileManager.PrintLong( "LastDayOfEvent:" + lastDayOfEvent.toString(ProfileManager.simpleDateFormat) );

                //If the last day the event occurred was before the start date, return 0 occurrences
                if (lastDayOfEvent.compareTo(start) < 0) {
                    //ProfileManager.PrintLong("Occurrences=0; Event did not occur within range [start, end]");
                    return 0; //Return 0
                }
                else {
                    //If the last day of the event falls within the range [start, end], adjust the end date to the last day of the event
                    if (lastDayOfEvent.compareTo(actualEndDay) <= 0 && lastDayOfEvent.compareTo(actualStartDay) >= 0) {
                        actualEndDay = lastDayOfEvent;
                    }
                }
            }

            //Occurrences calculation
            occurrences = (int) Math.ceil((double) (Days.daysBetween(actualStartDay, actualEndDay).getDays() + 1) / (double) repeatEveryN);
            //ProfileManager.PrintLong( "Occurrences:" + String.valueOf( occurrences ) );
        } else if (repeatFrequency == Repeat.WEEKLY) {
            //Start occurs at least at date, and at most, end
            LocalDate adjustedStart = dateMin(dateMax(start, date), end);
            //End occurs at repeatUntilDate or end, whichever comes first
            LocalDate adjustedEnd = dateMin(repeatUntilDate, end);

            int weeks = 0;

            for (int i = 1; i < 8; i++) {
                if (repeatDayOfWeek[i - 1]) {
                    actualStartDay = adjustedStart;
                    actualEndDay = adjustedEnd;

                    //If date is within the range (infinity, end]
                    if (date.compareTo(adjustedEnd) <= 0) {
                        if (actualStartDay.compareTo(calcNextDay(adjustedStart, i)) > 0) { //First DayOfWeek[i] after start
                            actualStartDay = dateMin(actualStartDay.plusWeeks(1), adjustedEnd); }
                        if (actualEndDay.compareTo(calcPrevDay(adjustedEnd, i)) < 0) { //First DayOfWeek[i] before end
                            actualEndDay = dateMin(actualEndDay.minusWeeks(1), adjustedEnd); }

                        //If the event repeats N times
                        if (repeatUntil == RepeatUntil.TIMES) {
                            //if (date.compareTo(date.withDayOfWeek(i)) > 0) { //First DayOfWeek[i] after date
                            //    lastDayOfEvent = ProfileManager.dateMin(date.withDayOfWeek(i).plusWeeks(1), adjustedEnd); }
                            //ProfileManager.PrintLong("First dayofweek[i] after date:" + calcNextDay(date, DateTimeConstants.MONDAY).toString(ProfileManager.simpleDateFormat));
                            lastDayOfEvent = calcNextDay(date, i).plusWeeks((repeatUntilTimes * repeatEveryN) - repeatEveryN);
                            //ProfileManager.PrintLong( "LastDayOfEvent:" + lastDayOfEvent.toString(ProfileManager.simpleDateFormat) );

                            //If the last day the event occurred was before the start date, return 0 occurrences
                            if (lastDayOfEvent.compareTo(start) < 0) {
                                //ProfileManager.PrintLong("Occurrences=0; Event did not occur within range [start, end]");
                                return 0; //Return 0
                            }
                            else {
                                //If the last day of the event falls within the range [start, end], adjust the end date to the last day of the event
                                if (lastDayOfEvent.compareTo(actualEndDay) <= 0 && lastDayOfEvent.compareTo(actualStartDay) >= 0) {
                                    actualEndDay = lastDayOfEvent;
                                }
                            }
                        }

                        //ProfileManager.PrintLong("ActualStart:" + actualStartDay.toString(ProfileManager.simpleDateFormat));
                        //ProfileManager.PrintLong("ActualEnd:" + actualEndDay.toString(ProfileManager.simpleDateFormat));

                        //Add to occurrences
                        weeks = Weeks.weeksBetween(actualStartDay.dayOfWeek().withMinimumValue().minusDays(1), actualEndDay.dayOfWeek().withMaximumValue().plusDays(1)).getWeeks();
                        //ProfileManager.PrintLong("Weeks:" + String.valueOf(weeks) + " Mod:" + (int)Math.ceil((double)weeks / repeatEveryN));
                        occurrences += (int)Math.ceil((double)weeks / repeatEveryN);
                    }
                }
            }

        } else if (repeatFrequency == Repeat.MONTHLY) {

        } else if (repeatFrequency == Repeat.YEARLY){

        }

        return occurrences;
    }
    /*
    LocalDate diff = new LocalDate();

                        long startDay = start.getTimeInMillis();
                        long endDay = end.getTimeInMillis();

                        long expenseBeginning = date.getTimeInMillis();
                        ProfileManager.PrintLong("expenseBeg:" + ProfileManager.simpleDateFormat.format(expenseBeginning));
                        long expenseRepeatUntil = (repeatUntilDate != null ? repeatUntilDate.getTimeInMillis() : 0);
                        ProfileManager.PrintLong("expenseRepUnt:" + ProfileManager.simpleDateFormat.format(expenseRepeatUntil));

                        diff.setTimeInMillis(startDay - expenseBeginning);

                        //int addDays = (int)( Math.ceil( (double)(diff.get(Calendar.DAY_OF_YEAR)) / repeatEveryN ) * repeatEveryN);
                        int k = ( repeatEveryN - ( (diff.get(LocalDate.DAY_OF_YEAR)) % repeatEveryN) );
                        int addDays = k * (k == repeatEveryN ? 0 : 1);
                        ProfileManager.PrintLong("K:" + String.valueOf(k));
                        ProfileManager.PrintLong("AddDays:" + String.valueOf(addDays));

                        diff.setTimeInMillis(startDay);
                        diff.add(LocalDate.DATE, addDays);

                        long actualStartDay = diff.getTimeInMillis();
                        ProfileManager.PrintLong("ActualStart:" + ProfileManager.simpleDateFormat.format(actualStartDay));

                        long actualEndDay = (repeatUntilDate != null ? Math.min(endDay, expenseRepeatUntil) : endDay);
                        ProfileManager.PrintLong("ActualEnd:" + ProfileManager.simpleDateFormat.format(actualEndDay));

                        diff.setTimeInMillis(actualEndDay - actualStartDay);
                        ProfileManager.PrintLong("Diff:" + ProfileManager.simpleDateFormat.format(diff.getTime()));

                        occurences = (int)Math.ceil( (diff.get(LocalDate.DAY_OF_YEAR)) / repeatEveryN );
                        ProfileManager.PrintLong("Occur:" + String.valueOf( occurences ) );



                        //LocalDate diff;

                //long startDay = start.getTimeInMillis();
                //long endDay = end.getTimeInMillis();

                //long expenseBeginning = date.getTimeInMillis();
                //ProfileManager.PrintLong("expenseBeg:" + ProfileManager.simpleDateFormat.format(expenseBeginning));
                //long expenseRepeatUntil = (repeatUntilDate != null ? repeatUntilDate.getTimeInMillis() : 0);
                //ProfileManager.PrintLong("expenseRepUnt:" + ProfileManager.simpleDateFormat.format(expenseRepeatUntil));

                //diff.setTimeInMillis(startDay - expenseBeginning);

                //int addDays = (int)( Math.ceil( (double)(diff.get(Calendar.DAY_OF_YEAR)) / repeatEveryN ) * repeatEveryN);
                //ProfileManager.PrintLong("DaysBtwn:" + String.valueOf(Days.daysBetween(date, start).getDays()));

                //int lastOccurrenceOfEventAfterDate;
                int daysBtwnDateandStart;
                int k;
                int firstOccurrenceOfEventAfterStart;

                LocalDate lastDayOfEvent = null;
                LocalDate actualStartDay = null;
                LocalDate actualEndDay = null;


                //Start Day calculation (Find the first day after start that the event occurred)
                daysBtwnDateandStart = Days.daysBetween(date, start).getDays();
                k = repeatEveryN - (daysBtwnDateandStart % repeatEveryN);
                firstOccurrenceOfEventAfterStart = k * (k == repeatEveryN ? 0 : 1);
                actualStartDay = start.plusDays(firstOccurrenceOfEventAfterStart);

                //End Day calculation
                actualEndDay = ProfileManager.dateMin(end, repeatUntilDate);

                ProfileManager.PrintLong( "DaysBtwnDateandStart:" + String.valueOf(daysBtwnDateandStart) );
                ProfileManager.PrintLong( "k:" + String.valueOf(k) );
                ProfileManager.PrintLong( "firstOccurrenceOfEventAfterStart:" + String.valueOf(firstOccurrenceOfEventAfterStart) );
                ProfileManager.PrintLong( "ActualStart:" + actualStartDay.toString(ProfileManager.simpleDateFormat) );
                ProfileManager.PrintLong( "ActualEnd:" + actualEndDay.toString(ProfileManager.simpleDateFormat) );

                //If the event repeats N times
                if ( repeatUntil == RepeatUntil.TIMES ){
                    lastDayOfEvent = date.plusDays((repeatUntilTimes * repeatEveryN) - repeatEveryN);
                    ProfileManager.PrintLong( "LastDayOfEvent:" + lastDayOfEvent.toString(ProfileManager.simpleDateFormat) );

                    //If the last day the event occurred was before the start date, return 0 occurrences
                    if ( lastDayOfEvent.compareTo(start) < 0 ){
                        ProfileManager.PrintLong("Occurrences=0; Event did not occur within range [start, end]");
                        return 0; //Return 0
                    }
                    else {
                        //If the last day of the event falls within the range [start, end], adjust the end date to the last day of the event
                        if ( lastDayOfEvent.compareTo(actualEndDay) <= 0 && lastDayOfEvent.compareTo(actualStartDay) >= 0 ){
                            actualEndDay = lastDayOfEvent;
                        }
                    }
                }

                //Occurrences calculation
                occurrences = (int)Math.ceil( (double)(Days.daysBetween(actualStartDay, actualEndDay).getDays()+1) / (double)repeatEveryN );
                ProfileManager.PrintLong( "Occurrences:" + String.valueOf( occurrences ) );


                //(daysBtwnDateandStart / repeatEveryN) < repeatUntilTimes;

                //date.plusDays(this) == last day of last section of length repeatEveryN. If this - repeatEveryN < start, then the event ended before the timeFrame
                //lastOccurrenceOfEventAfterDate = (repeatUntilTimes != 0 ? (repeatUntilTimes * repeatEveryN) - repeatEveryN : 0);
                //ProfileManager.PrintLong("lastOccurenceOfEventAfterDate:" + String.valueOf(lastOccurrenceOfEventAfterDate));

                //Defaults to date if no repeatUntilTimes is set
                //lastDayOfEvent = date.plusDays(lastOccurrenceOfEventAfterDate);
                //ProfileManager.PrintLong("lastDayOfEvent:" + lastDayOfEvent.toString(ProfileManager.simpleDateFormat));


                //daysBtwnDateandStart = (Days.daysBetween(date, start).getDays());
                //k = repeatEveryN - ( daysBtwnDateandStart % repeatEveryN );
                //firstOccurrenceOfEventAfterStart = k * (k == repeatEveryN ? 0 : 1);
                //ProfileManager.PrintLong("DaysBtwnDateandStart:" + String.valueOf(daysBtwnDateandStart));
                //ProfileManager.PrintLong("k:" + String.valueOf(k));
                //ProfileManager.PrintLong("firstOccurrenceOfEventAfterStart:" + String.valueOf(firstOccurrenceOfEventAfterStart));


                //ProfileManager.PrintLong("K:" + String.valueOf(k));
                //ProfileManager.PrintLong("AddDays:" + String.valueOf(addDays));

                //diff.setTimeInMillis(startDay);
                //diff.add(LocalDate.DATE, addDays);

                //actualStartDay = start.plusDays(firstOccurrenceOfEventAfterStart);
                //ProfileManager.PrintLong("ActualStart:" + actualStartDay.toString(ProfileManager.simpleDateFormat));

                //actualEndDay = ProfileManager.dateMin(ProfileManager.dateMin(repeatUntilDate, end), lastDayOfEvent); //(repeatUntilDate != null ? (end.compareTo(repeatUntilDate) <= 0 ? end : repeatUntilDate ) : end);
                //Long actualEndDay = (repeatUntilDate != null ? Math.min(endDay, expenseRepeatUntil) : endDay);
                //ProfileManager.PrintLong("ActualEnd:" + actualEndDay.toString(ProfileManager.simpleDateFormat));

                //diff.setTimeInMillis(actualEndDay - actualStartDay);
                //ProfileManager.PrintLong("Diff:" + ProfileManager.simpleDateFormat.format(diff.getTime()));
                //ProfileManager.PrintLong("Days:" + String.valueOf(Days.daysBetween(actualStartDay, actualEndDay).getDays()+1));
                //occurrences = (int)Math.ceil( (double)(Days.daysBetween(actualStartDay, actualEndDay).getDays()+1) / (double)repeatEveryN );
                //ProfileManager.PrintLong("Occur:" + String.valueOf( occurrences ) );
     */